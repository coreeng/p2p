name: increment-version

on:
  workflow_call:
    outputs:
      version:
        description: "The next semantic version"
        value: ${{ jobs.increment-version.outputs.version }}
      previous_version:
        description: "The previous version"
        value: ${{ jobs.increment-version.outputs.previous_version }}
    secrets:
      git-token:
        required: true
    inputs:
      main-branch:
        required: false
        type: string
        default: 'refs/heads/main'
      dry-run:
        type: boolean
        required: false
        default: false
      version-prefix:
        required: false
        type: string
        default: 'v'
      checkout-version:
        required: false
        type: string
        default: ''


jobs:
  increment-version:
    name: increment-version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setversion.outputs.version }}
      previous_version: ${{ steps.setversion.outputs.previous_version }}
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ inputs.checkout-version }}
    - name: Configure Git
      run: |
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"    

    - name: Get Previous tag
      id: previoustag
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.git-token }}
        VERSION_PREFIX: ${{ inputs.version-prefix }}
      run: |
        REGEX=$(echo "^${VERSION_PREFIX}([0-9]+)\.([0-9]+)\.([0-9]+)$")
        PREVIOUS_VERSION=$(git tag | sort -r --version-sort | (grep -E ${REGEX} || echo "") | head -n1 )
        [ -z "$PREVIOUS_VERSION" ] && PREVIOUS_VERSION=${VERSION_PREFIX}0.0.0
        echo "tag=$PREVIOUS_VERSION" >> "$GITHUB_OUTPUT" 
      

    - name: get previous version from tag
      id: previousversion
      shell: bash
      env:
        VERSION_PREFIX: ${{ inputs.version-prefix }}
      run: |
        echo "version=$(echo ${{ steps.previoustag.outputs.tag }} | awk -F ${VERSION_PREFIX} '{print $2}')" >> "$GITHUB_OUTPUT"

    - name: Get next patch version
      id: semvers
      uses: "WyriHaximus/github-action-next-semvers@v1"
      with:
        version: ${{ steps.previousversion.outputs.version }} 

    - name: get git hashes
      id: githashes
      shell: bash
      env:
        VERSION_PREFIX: ${{ inputs.version-prefix }}
      run: |
        GIT_REF="HEAD"
        PREVIOUS_TAG=${{ steps.previousversion.outputs.version }}
        if [ -n "$GITHUB_HEAD_REF" ]; then
            GIT_REF="origin/$GITHUB_HEAD_REF"
        fi
        HASH=$(git rev-parse ${GIT_REF})
        LAST_TAG_HASH=$(git rev-list -n 1 ${VERSION_PREFIX}${PREVIOUS_TAG} || echo "does-not-exist" )

        echo "current_hash=${HASH}" >> "$GITHUB_OUTPUT"
        echo "previous_tag_hash=${LAST_TAG_HASH}" >> "$GITHUB_OUTPUT"

    - name: Create tag
      uses: rickstaa/action-create-tag@v1
      if: success() && (github.ref == inputs.main-branch && inputs.dry-run == false) && (steps.githashes.outputs.current_hash != steps.githashes.outputs.previous_tag_hash)
      id: create_tag
      with:
        tag: ${{ inputs.version-prefix }}${{ steps.semvers.outputs.patch }}
        tag_exists_error: true
        commit_sha: ${{ steps.githashes.outputs.current_hash }}

    - name: Set bumped version in output
      id: setversion
      shell: bash
      run: |
        set -x

        TAG=${{ steps.semvers.outputs.patch }}
        PREVIOUS_TAG=${{ steps.previousversion.outputs.version }}
 
        HASH=${{ steps.githashes.outputs.current_hash }}
        LAST_TAG_HASH=${{ steps.githashes.outputs.previous_tag_hash }}

        if [ "${HASH}" = "${LAST_TAG_HASH}" ]; then
            echo "Tag already exists on this commit, setting previous version"
            echo "version=${PREVIOUS_TAG}" >> "$GITHUB_OUTPUT"
        else
            if [ "${{ inputs.main-branch }}" = "${{ github.ref }}" ]; then
                echo "On main branch, setting next version"
                echo "version=${TAG}" >> "$GITHUB_OUTPUT"
            else
                echo "Not on main branch, setting previous version + hash"
                echo "version=${PREVIOUS_TAG}-${HASH}" >> "$GITHUB_OUTPUT"
            fi
        fi
        echo "previous_version=${PREVIOUS_TAG}" >> "$GITHUB_OUTPUT"
