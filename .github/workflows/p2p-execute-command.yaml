on:
  workflow_call:
    secrets:
      env_vars:
        required: false
    inputs:
      command:
        required: true
        type: string
      github_env:
        required: false
        type: string
        default: ''
      dry-run:
        required: false
        type: boolean
        default: false
      region:
        required: false
        type: string
        default: europe-west2
      version:
        required: true
        type: string
      checkout-version:
        required: false
        type: string
      zone:
        required: false
        type: string
        default: europe-west2-a
      optional:
        required: false
        type: boolean
        default: false
      pre-targets:
        description: |
          Make targets to run before the command
        required: false
        type: string
        default: ''
      post-targets:
        description: |
          Make targets to run after the command
        required: false
        type: string
        default: ''
      working-directory:
        required: false
        type: string
        default: '.'


jobs:
  exec:
    name: '${{ inputs.command }} (${{ inputs.github_env }})'
    runs-on: ubuntu-latest
    environment: ${{ inputs.github_env }}
    env:
      env_vars: ${{ secrets.env_vars }}
      BASE_DOMAIN: ${{ vars.BASE_DOMAIN }}
      INTERNAL_SERVICES_DOMAIN: ${{ vars.INTERNAL_SERVICES_DOMAIN }}
      DPLATFORM: ${{ vars.DPLATFORM }}
      PLATFORM_ENVIRONMENT: ${{ vars.DPLATFORM }}
      PROJECT_ID: ${{ vars.PROJECT_ID }}
      PROJECT_NUMBER: ${{ vars.PROJECT_NUMBER }}
      REGION: ${{ inputs.region }}
      REGISTRY: ${{ inputs.region }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/tenant/${{ vars.TENANT_NAME }}
      VERSION: ${{ inputs.version }}
      SERVICE_ACCOUNT: p2p-${{ vars.TENANT_NAME }}@${{ vars.PROJECT_ID }}.iam.gserviceaccount.com
      TENANT_NAME: ${{ vars.TENANT_NAME }}
      WORKLOAD_IDENTITY_PROVIDER: projects/${{ vars.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/p2p-${{ vars.TENANT_NAME }}/providers/p2p-${{ vars.TENANT_NAME }}
      SKIP: ${{ inputs.optional }}
    steps:
      - name: print env context
        run: |
          yq -p=json -C <<EOT
          ${{ toJSON(env) }}
          EOT

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.dry-run == false && inputs.checkout-version || '' }}

      - name: Skip job when optional and make target not exist
        if: ${{ inputs.optional == true }}
        working-directory: ${{ inputs.working-directory }}
        id: is_optional
        run: |          
          declare -r optional_target=${{ inputs.command }}
          # match target in format: `.PHONY: <target_name>`, skip if commented out
          if grep "^[^#]*.PHONY.*${optional_target}.*" ./Makefile; then            
            echo "SKIP=false" >> $GITHUB_ENV
          else
            echo "WARNING: No Makefile target [$optional_target], skipping job"
          fi

      - name: Authenticate to Google Cloud
        id: auth
        if: ${{ inputs.dry-run == false && env.SKIP == 'false' }}
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
          token_format: access_token
          access_token_lifetime: 600s

      - name: Setup Google Cloud SDK
        id: setup-gcloud
        if: ${{ inputs.dry-run == false && env.SKIP == 'false' }}
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: beta,gke-gcloud-auth-plugin

      - name: Setup NumPy
        id: setup-numpy
        if: ${{ inputs.dry-run == false && env.SKIP == 'false' }}
        shell: bash
        # https://cloud.google.com/iap/docs/using-tcp-forwarding#increasing_the_tcp_upload_bandwidth
        run: $(gcloud info --format="value(basic.python_location)") -m pip install numpy

      - name: Setup kubeconfig
        id: setup-kubeconfig
        if: ${{ inputs.dry-run == false && env.SKIP == 'false' }}
        shell: bash
        run: |
          gcloud container clusters get-credentials --project $PROJECT_ID --zone $REGION --internal-ip ${{ env.DPLATFORM }}
          kubectl config set clusters.gke_${{ env.PROJECT_ID }}_${{ inputs.region }}_${{ env.DPLATFORM }}.proxy-url http://localhost:57755

      - name: Login to Artifact Registry
        uses: docker/login-action@v3
        if: ${{ inputs.dry-run == false && env.SKIP == 'false' }}
        with:
          registry: europe-west2-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Decode environment variables
        if:  ${{ env.SKIP == 'false' }}
        run: |
          for i in $env_vars; do
            i=$(echo $i | sed 's/=.*//g')=$(echo ${i#*=})
            echo ::add-mask::${i#*=}
            printf '%s\n' $i >> $GITHUB_ENV
          done

      - name: Run Command
        id: run-command
        if: ${{ inputs.dry-run == false && env.SKIP == 'false' }}
        working-directory: ${{ inputs.working-directory }}
        run: |
          nohup sh -c "while true ; do gcloud compute start-iap-tunnel ${{ env.DPLATFORM }}-bastion 3128 --local-host-port localhost:57755 --project ${{ env.PROJECT_ID }}  --zone ${{ inputs.zone }}  ; done" &
          sleep 4
          kubectl cluster-info
          make ${{ inputs.command }}
