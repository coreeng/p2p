
name: increment-version

on:
  workflow_call:
    outputs:
      version:
        description: "The next semantic version"
        value: ${{ jobs.increment-version.outputs.version }}
    secrets:
      git-token:
        required: true
    inputs:
      dry-run:
        type: boolean
        required: false
        default: false

jobs:
  increment-version:
    name: increment-version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setversion.outputs.version }}
      
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  
    - name: Configure Git
      run: |
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"    
        
    - name: Get Previous tag
      id: previoustag
      uses: "WyriHaximus/github-action-get-previous-tag@v1"
      with:
        prefix: v
        fallback: v0.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.git-token }}

    - name: get previous version from tag
      id: previousversion
      shell: bash
      run: |
        echo "version=$(echo ${{ steps.previoustag.outputs.tag }} | cut -d'v' -f 2)" >> "$GITHUB_OUTPUT"

    - name: Get next minor version
      id: semvers
      uses: "WyriHaximus/github-action-next-semvers@v1"
      with:
        version: ${{ steps.previousversion.outputs.version }} 

    - name: Set bumped version in output
      id: setversion
      shell: bash
      run: |
        echo "generate the following tags"
        PATCH=$(echo ${{ steps.semvers.outputs.patch }})
        MINOR=$(echo ${{ steps.semvers.outputs.patch }} | cut -d. -f 1,2)
        MAJOR=$(echo ${{ steps.semvers.outputs.patch }} | cut -d. -f 1)
        echo "tags={ "include": [ { "tag": "v$PATCH" }, { "tag": v$MINOR }, { "tag": v$MAJOR } ]}" >> "$GITHUB_OUTPUT"
        EOT
        echo "patch=$PATCH" >> "$GITHUB_OUTPUT"
        echo "minor=$MINOR" >> "$GITHUB_OUTPUT"
        echo "major=$MAJOR" >> "$GITHUB_OUTPUT"
        

    - name: Show tags
      strategy:
        matrix: ${{ fromJSON(steps.setversion.outputs.tags) }}
      run: |
        echo "tag=${{ matrix.tag }}"
        echo "version=${{ steps.setversion.outputs.patch }}"
        echo "minor=${{ steps.setversion.outputs.minor }}"
        echo "major=${{ steps.setversion.outputs.major }}"

    - name: Create vA.B.C tag
      uses: rickstaa/action-create-tag@v1
      if: inputs.dry-run == false
      id: create_tag
      with:
        tag: v${{ steps.semvers.outputs.minor }}
        tag_exists_error: true
