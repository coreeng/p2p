name: p2p-command

on:
  workflow_call:
    secrets:
      env_vars:
        required: false
    inputs:
      promotion-stage:
        required: true
        type: string
      dry-run:
        required: false
        type: boolean
        default: false
      connect-to-k8s:
        required: false
        type: boolean
        default: false
      source_matrix:
        required: true
        type: string
      dest_github_env:
        required: true
        type: string
      app-name:
        required: false
        type: string
        default: ''
      version:
        required: false
        type: string
        default: ''
      region:
        required: false
        type: string
        default: europe-west2
      zone:
        required: false
        type: string
        default: europe-west2-a
      working-directory:
        required: false
        type: string
        default: '.'
      checkout-version:
        required: false
        type: string
      corectl-version:
        required: false
        type: string

jobs:
  lookup:
    runs-on: ubuntu-24.04
    environment: ${{ fromJson(inputs.source_matrix).include[0]['deploy_env'] }}
    env:
      REGISTRY: ${{ inputs.region }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/tenant/${{ vars.TENANT_NAME }}
      PROJECT_ID: ${{ vars.PROJECT_ID }}
      SERVICE_ACCOUNT: p2p-${{ vars.TENANT_NAME }}@${{ vars.PROJECT_ID }}.iam.gserviceaccount.com
      WORKLOAD_IDENTITY_PROVIDER: projects/${{ vars.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/p2p-${{ vars.TENANT_NAME }}/providers/p2p-${{ vars.TENANT_NAME }}
    outputs:
      source_registry: ${{ env.REGISTRY }}
      source_project_id: ${{ env.PROJECT_ID }}
      source_service_account: ${{ env.SERVICE_ACCOUNT }}
      source_workflow_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
    steps:
      - name: print env context
        run: |
          yq -p=json -C <<EOT
          ${{ toJSON(env) }}
          EOT

  promote-image:
    name: promote-to-${{ inputs.promotion-stage }}
    runs-on: ubuntu-24.04
    needs: [lookup]
    environment: ${{ inputs.dest_github_env }}
    env:
      env_vars: ${{ secrets.env_vars }}
      BASE_DOMAIN: ${{ vars.BASE_DOMAIN }}
      INTERNAL_SERVICES_DOMAIN: ${{ vars.INTERNAL_SERVICES_DOMAIN }}
      DEST_GITHUB_ENV: ${{ inputs.dest_github_env }}
      DPLATFORM: ${{ vars.DPLATFORM }}
      PROJECT_ID: ${{ vars.PROJECT_ID }}
      PROJECT_NUMBER: ${{ vars.PROJECT_NUMBER }}
      REGION: ${{ inputs.region }}
      REGISTRY: ${{ inputs.region }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/tenant/${{ vars.TENANT_NAME }}
      SERVICE_ACCOUNT: p2p-${{ vars.TENANT_NAME }}@${{ vars.PROJECT_ID }}.iam.gserviceaccount.com
      VERSION: ${{ inputs.version }}
      SOURCE_GITHUB_ENV: ${{ fromJson(inputs.source_matrix).include[0]['deploy_env'] }}
      SOURCE_PROJECT_ID: ${{ needs.lookup.outputs.source_project_id }}
      SOURCE_REGISTRY: ${{ needs.lookup.outputs.source_registry }}
      SOURCE_SERVICE_ACCOUNT: ${{ needs.lookup.outputs.source_service_account }}
      SOURCE_WORKLOAD_IDENTITY_PROVIDER: ${{ needs.lookup.outputs.source_workflow_identity_provider }}
      TENANT_NAME: ${{ vars.TENANT_NAME }}
      WORKLOAD_IDENTITY_PROVIDER: projects/${{ vars.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/p2p-${{ vars.TENANT_NAME }}/providers/p2p-${{ vars.TENANT_NAME }}
    permissions:
      contents: read
      id-token: write

    steps:
      - name: print env context
        run: |
          yq -p=json -C <<EOT
          ${{ toJSON(env) }}
          EOT

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.dry-run == false && inputs.checkout-version || '' }}


      - name: Authenticate to Google Cloud (Source)
        id: auth-source
        if: inputs.dry-run == false
        uses: google-github-actions/auth@v2
        with:
          export_environment_variables: false
          workload_identity_provider: ${{ env.SOURCE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SOURCE_SERVICE_ACCOUNT }}
          project_id: ${{ env.SOURCE_PROJECT_ID }}
          token_format: access_token
          access_token_lifetime: 3600s


      - name: Authenticate to Google Cloud (Dest)
        id: auth-dest
        if: inputs.dry-run == false
        uses: google-github-actions/auth@v2
        with:
          export_environment_variables: false
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
          project_id: ${{ env.PROJECT_ID }}
          token_format: access_token
          access_token_lifetime: 3600s

      - name: Setup Google Cloud SDK
        id: setup-gcloud
        if: inputs.dry-run == false && inputs.connect-to-k8s == true
        uses: google-github-actions/setup-gcloud@v2
        with:
          skip_install: true

      - name: Setup kubeconfig
        id: setup-kubeconfig
        if: inputs.dry-run == false && inputs.connect-to-k8s == true
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth-source.outputs.credentials_file_path }}
        uses: google-github-actions/get-gke-credentials@v2
        with:
          context_name: gke_${{ env.PROJECT_ID }}_${{ inputs.region }}_${{ env.DPLATFORM }}
          cluster_name: ${{ env.DPLATFORM }}
          location: ${{ inputs.region }}
          project_id: ${{ env.PROJECT_ID }}
          use_dns_based_endpoint: true

      - name: Test kubeconfig
        id: test-kubeconfig
        if: inputs.dry-run == false && inputs.connect-to-k8s == true
        run: |
          kubectl cluster-info

      - name: Setup corectl
        id: setup-corectl
        if: inputs.dry-run == false
        env:
          CORECTL_VERSION: ${{ inputs.corectl-version }}
        run: |
          if [ -z "${CORECTL_VERSION}" ]; then
            CORECTL_VERSION=$(curl -s https://api.github.com/repos/coreeng/corectl/releases/latest | grep '"tag_name":' | cut -d'"' -f4)
          fi
          echo "Downloading corectl ${CORECTL_VERSION}..."
          curl -Lso corectl.tgz "https://github.com/coreeng/corectl/releases/download/${CORECTL_VERSION}/corectl_Linux_x86_64.tar.gz"
          tar zxf corectl.tgz
          sudo install -o root -g root -m 0755 corectl /usr/local/bin/
          rm corectl.tgz corectl
          corectl version

      - name: Decode environment variables
        run: |
          for i in $env_vars; do
            i=$(echo $i | sed 's/=.*//g')=$(echo ${i#*=})
            echo ::add-mask::${i#*=}
            printf '%s\n' $i >> "${GITHUB_ENV}"
          done

      - name: Set p2p variables
        id: setup-p2p-variables
        run: |
          env | grep "^P2P_" | sort
          export P2P_TENANT_NAME=${{ vars.TENANT_NAME }}
          export P2P_APP_NAME=${{ inputs.app-name }}
          export P2P_VERSION=${{ inputs.version }}
          export P2P_REGISTRY=${{ inputs.region }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/tenant/${{ vars.TENANT_NAME }}
          export P2P_REGISTRY_FAST_FEEDBACK_PATH=fast-feedback
          export P2P_REGISTRY_EXTENDED_TEST_PATH=extended-test
          export P2P_REGISTRY_PROD_PATH=prod
          export P2P_REGISTRY_FAST_FEEDBACK=${P2P_REGISTRY}/${P2P_REGISTRY_FAST_FEEDBACK_PATH}
          export P2P_REGISTRY_EXTENDED_TEST=${P2P_REGISTRY}/${P2P_REGISTRY_EXTENDED_TEST_PATH}
          export P2P_REGISTRY_PROD=${P2P_REGISTRY}/${P2P_REGISTRY_PROD_PATH}
          if [[ "${{ vars.TENANT_NAME }}" == "${{ inputs.app-name }}" ]]; then
            P2P_NAMESPACE="${{ vars.TENANT_NAME }}"
          else
            P2P_NAMESPACE="${{ vars.TENANT_NAME }}-${{ inputs.app-name }}"
          fi
          export P2P_NAMESPACE_FUNCTIONAL=${P2P_NAMESPACE}-functional
          export P2P_NAMESPACE_NFT=${P2P_NAMESPACE}-nft
          export P2P_NAMESPACE_INTEGRATION=${P2P_NAMESPACE}-integration
          export P2P_NAMESPACE_EXTENDED=${P2P_NAMESPACE}-extended
          export P2P_NAMESPACE_PROD=${P2P_NAMESPACE}-prod
          env | grep "^P2P_" | sort | tee "${GITHUB_ENV}"

      - name: Promote to ${{ inputs.promotion-stage }}
        id: run-promotion
        if: ${{ inputs.dry-run == false }}
        working-directory: ${{ inputs.working-directory }}
        env:
          SOURCE_AUTH_OVERRIDE: ${{ steps.auth-source.outputs.credentials_file_path }}
          SOURCE_ACCESS_TOKEN: ${{ steps.auth-source.outputs.access_token }}
          DEST_AUTH_OVERRIDE: ${{ steps.auth-dest.outputs.credentials_file_path }}
          DEST_ACCESS_TOKEN: ${{ steps.auth-dest.outputs.access_token }}
        run: |
          make p2p-promote-to-${{ inputs.promotion-stage }}
