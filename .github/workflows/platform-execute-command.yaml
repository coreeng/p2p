name: Core Platform

on:
  workflow_call:
    secrets:
      env_vars:
        required: false
      cecg-registry-username:
        description: 'The username for the GHCR registry to pull the Core Platform image from'
        required: true
      cecg-registry-secret:
        description: 'The secret for the GHCR registry to pull the Core Platform image from'
        required: true
    inputs:
      name:
        required: true
        type: string
      action:
        required: true
        type: string
      environment:
        required: true
        type: string
      platform:
        required: true
        type: string
      release:
        required: true
        type: string
      targets:
        type: string
      feature:
        type: string
      post-targets:
        type: string

jobs:
  core-platform:
    name: ${{ inputs.name }}
    runs-on: ubuntu-24.04
    environment: ${{ inputs.environment }}
    concurrency:
      group: ${{ inputs.environment }}-${{ github.ref }}
      cancel-in-progress: false

    env:
      env_vars: ${{ secrets.env_vars }}
      GITHUB_TOKEN: ${{ github.token }}
      ENV: ${{ inputs.environment }}
      PLATFORM: ${{ inputs.platform }}
      TERRAFORM_ARGS: "-auto-approve"
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

    permissions:
      contents: read
      id-token: write
      packages: read
      pull-requests: write

    container:
      image:  ghcr.io/coreeng/core-platform:${{ inputs.release }}
      credentials:
        username: ${{ secrets.cecg-registry-username }}
        password: ${{ secrets.cecg-registry-secret }}

    defaults:
      run:
        working-directory: /app

    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v4

      - id: auth-aws
        if: inputs.platform == 'aws'
        name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - id: auth-azure
        if: inputs.platform == 'azure'
        name: Authenticate to Azure
        uses: azure/login@v1.5.1
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - id: auth-gcloud
        if: inputs.platform == 'gcp'
        name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}

      - id: prepare-workspace
        name: Prepare workspace
        run: |
          mv "${GITHUB_WORKSPACE}/environments" "/app/environments"
          mv "${GITHUB_WORKSPACE}/tenants" "/app/tenants"

      - name: Decode environment variables
        run: |
          IFS=$'\n'
          for i in $env_vars; do
            i=$(echo "$i" | sed 's/=.*//g')="${i#*=}"
            echo "::add-mask::${i#*=}"
            printf '%s\n' "$i" >> "${GITHUB_ENV}"
          done

      - id: make-targets
        if: inputs.targets != ''
        name: Run make ${{ inputs.targets }}
        run: |
          make ${{ inputs.targets }}

      - id: features-init
        if: inputs.feature != ''
        name: Init feature ${{ inputs.feature }}
        run: |
          make features-init feature=${{ inputs.feature }}

      - id: features-plan
        if: inputs.feature != '' && inputs.action == 'features-plan'
        name: Plan feature ${{ inputs.feature }}
        run: |
          make features-plan feature=${{ inputs.feature }}

      - id: features-apply
        if: inputs.feature != '' && inputs.action == 'features-apply'
        name: Apply feature ${{ inputs.feature }}
        run: |
          make features-apply feature=${{ inputs.feature }}

      - id: features-test
        if: inputs.action == 'features-test' || inputs.action == 'features-apply'
        name: Test feature ${{ inputs.feature }}
        run: |
          make features-test feature=${{ inputs.feature }}

      - id: features-destroy
        if: inputs.action == 'features-destroy'
        name: Destroy feature ${{ inputs.feature }}
        run: |
          make features-destroy feature=${{ inputs.feature }}

      - id: make-post-targets
        if: inputs.post-targets != ''
        name: Run make ${{ inputs.post-targets }}
        run: |
          make ${{ inputs.post-targets }}
